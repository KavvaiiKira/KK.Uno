// <auto-generated />
using System;
using KK.Uno.Server.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KK.Uno.Server.Migrations
{
    [DbContext(typeof(KKUnoDBContext))]
    [Migration("20250501095508_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.CardCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.ToTable("CardCollections", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CardCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("CardCollectionId");

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("CardCollectionId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.CardStateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<Guid>("UserGameStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameStateId");

                    b.HasKey("Id");

                    b.HasIndex("UserGameStateId");

                    b.ToTable("CardStates", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CurrentUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("CurrentUserId");

                    b.Property<int>("QueueDirection")
                        .HasColumnType("integer")
                        .HasColumnName("QueueDirection");

                    b.Property<int>("TopCardColor")
                        .HasColumnType("integer")
                        .HasColumnName("TopCardColor");

                    b.Property<int>("TopCardType")
                        .HasColumnType("integer")
                        .HasColumnName("TopCardType");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int?>("CardColor")
                        .HasColumnType("integer")
                        .HasColumnName("CardColor");

                    b.Property<int?>("CardType")
                        .HasColumnType("integer")
                        .HasColumnName("CardType");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameLogs", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameQueueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<int>("UserIndex")
                        .HasColumnType("integer")
                        .HasColumnName("UserIndex");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameQueues", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.HubConnectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ConnectionId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HubConnections", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserCardCollectionEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<Guid>("CardCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("CardCollectionId");

                    b.HasKey("UserId", "CardCollectionId");

                    b.HasIndex("CardCollectionId");

                    b.ToTable("UsersCardCollections", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DisplayName");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("Image");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<DateTimeOffset>("Registered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Registered");

                    b.Property<int>("WinCount")
                        .HasColumnType("integer")
                        .HasColumnName("WinCount");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserGameStateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGameStates", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.CardEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.CardCollectionEntity", "CardCollection")
                        .WithMany("Cards")
                        .HasForeignKey("CardCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardCollection");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.CardStateEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.UserGameStateEntity", "UserGameState")
                        .WithMany("CardStates")
                        .HasForeignKey("UserGameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGameState");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameLogEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.GameEntity", "Game")
                        .WithMany("GameLogs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "User")
                        .WithMany("GameLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameQueueEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.GameEntity", "Game")
                        .WithMany("GameQueues")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "User")
                        .WithMany("GameQueues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.HubConnectionEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "User")
                        .WithMany("HubConnections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserCardCollectionEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.CardCollectionEntity", "CardCollection")
                        .WithMany("UserCardCollections")
                        .HasForeignKey("CardCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "User")
                        .WithMany("UserCardCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardCollection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserGameStateEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.GameEntity", "Game")
                        .WithMany("UserGameStates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "User")
                        .WithMany("UserGameStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("KK.Uno.Server.EF.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KK.Uno.Server.EF.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.CardCollectionEntity", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("UserCardCollections");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.GameEntity", b =>
                {
                    b.Navigation("GameLogs");

                    b.Navigation("GameQueues");

                    b.Navigation("UserGameStates");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserEntity", b =>
                {
                    b.Navigation("GameLogs");

                    b.Navigation("GameQueues");

                    b.Navigation("HubConnections");

                    b.Navigation("UserCardCollections");

                    b.Navigation("UserGameStates");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KK.Uno.Server.EF.Entities.UserGameStateEntity", b =>
                {
                    b.Navigation("CardStates");
                });
#pragma warning restore 612, 618
        }
    }
}
